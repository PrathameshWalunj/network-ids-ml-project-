import pefile
import hashlib
import os
import magic
import math
import subprocess

def calculate_hash(file_path):
    """Calculate MD5 and SHA256 hashes of a file."""
    with open(file_path, 'rb') as f:
        data = f.read()
        md5 = hashlib.md5(data).hexdigest()
        sha256 = hashlib.sha256(data).hexdigest()
    return md5, sha256

def get_file_type(file_path):
    """Determine the file type using magic numbers."""
    return magic.from_file(file_path)

def analyze_pe(file_path):
    """Perform basic analysis on PE files."""
    try:
        pe = pefile.PE(file_path)
        return {
            'Machine': pe.FILE_HEADER.Machine,
            'NumberOfSections': pe.FILE_HEADER.NumberOfSections,
            'TimeDateStamp': pe.FILE_HEADER.TimeDateStamp,
            'Characteristics': pe.FILE_HEADER.Characteristics,
            'EntryPoint': pe.OPTIONAL_HEADER.AddressOfEntryPoint,
            'ImageBase': pe.OPTIONAL_HEADER.ImageBase,
        }
    except pefile.PEFormatError:
        return None

def extract_strings(file_path):
    """Extract ASCII and Unicode strings from the file."""
    result = subprocess.run(['strings', file_path], stdout=subprocess.PIPE)
    return result.stdout.decode('utf-8', errors='ignore')

def calculate_entropy(data):
    """Calculate the entropy of the given data."""
    if not data:
        return 0
    entropy = 0
    data_length = len(data)
    for x in range(256):
        p_x = data.count(chr(x)) / data_length
        if p_x > 0:
            entropy += - p_x * math.log2(p_x)
    return entropy

def analyze_file(file_path):
    """Perform basic static analysis on a file."""
    if not os.path.exists(file_path):
        return {"error": "File not found"}

    result = {}
    result['file_name'] = os.path.basename(file_path)
    result['file_size'] = os.path.getsize(file_path)
    result['file_type'] = get_file_type(file_path)
    result['md5'], result['sha256'] = calculate_hash(file_path)

    with open(file_path, 'rb') as f:
        data = f.read()
        result['entropy'] = calculate_entropy(data.decode('latin-1'))

    # Extract strings for additional analysis
    result['strings'] = extract_strings(file_path)

    if result['file_type'].startswith('PE32'):
        result['pe_info'] = analyze_pe(file_path)

    # Simple heuristic to flag potential malware based on entropy and strings
    result['malware_likelihood'] = 0
    if result['entropy'] > 7.5:
        result['malware_likelihood'] += 50
    if 'malware' in result['strings'].lower():
        result['malware_likelihood'] += 50

    if result['malware_likelihood'] > 100:
        result['malware_likelihood'] = 100

    return result

if __name__ == "__main__":
    # Test the function with a sample file
    sample_file = "/Users/prathameshwalunj/Desktop/6-executable.exe"  # Replace with an actual file path
    analysis_result = analyze_file(sample_file)
    print(analysis_result)
